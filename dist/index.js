!function(e){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,n){!function(e,t){if(!x[e]||!w[e])return;for(var n in w[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(y[n]=t[n]);0==--g&&0===b&&j()}(e,n),t&&t(e,n)};var n,r=!0,o="8b7b3eb8144e1797ba64",i=1e4,a={},c=[],s=[];function u(e){var t=k[e];if(!t)return P;var r=function(r){return t.hot.active?(k[r]?-1===k[r].parents.indexOf(e)&&k[r].parents.push(e):(c=[e],n=r),-1===t.children.indexOf(r)&&t.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+e),c=[]),P(r)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return P[e]},set:function(t){P[e]=t}}};for(var i in P)Object.prototype.hasOwnProperty.call(P,i)&&"e"!==i&&"t"!==i&&Object.defineProperty(r,i,o(i));return r.e=function(e){return"ready"===p&&d("prepare"),b++,P.e(e).then(t,function(e){throw t(),e});function t(){b--,"prepare"===p&&(m[e]||_(e),0===b&&0===g&&j())}},r.t=function(e,t){return 1&t&&(e=r(e)),P.t(e,-2&t)},r}function l(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var r=0;r<e.length;r++)t._acceptedDependencies[e[r]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:S,apply:E,status:function(e){if(!e)return p;f.push(e)},addStatusHandler:function(e){f.push(e)},removeStatusHandler:function(e){var t=f.indexOf(e);t>=0&&f.splice(t,1)},data:a[e]};return n=void 0,t}var f=[],p="idle";function d(e){p=e;for(var t=0;t<f.length;t++)f[t].call(null,e)}var h,y,v,g=0,b=0,m={},w={},x={};function O(e){return+e+""===e?+e:e}function S(e){if("idle"!==p)throw new Error("check() is only allowed in idle status");return r=e,d("check"),(t=i,t=t||1e4,new Promise(function(e,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var r=new XMLHttpRequest,i=P.p+""+o+".hot-update.json";r.open("GET",i,!0),r.timeout=t,r.send(null)}catch(e){return n(e)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)n(new Error("Manifest request to "+i+" timed out."));else if(404===r.status)e();else if(200!==r.status&&304!==r.status)n(new Error("Manifest request to "+i+" failed."));else{try{var t=JSON.parse(r.responseText)}catch(e){return void n(e)}e(t)}}})).then(function(e){if(!e)return d("idle"),null;w={},m={},x=e.c,v=e.h,d("prepare");var t=new Promise(function(e,t){h={resolve:e,reject:t}});y={};return _(0),"prepare"===p&&0===b&&0===g&&j(),t});var t}function _(e){x[e]?(w[e]=!0,g++,function(e){var t=document.createElement("script");t.charset="utf-8",t.src=P.p+""+e+"."+o+".hot-update.js",document.head.appendChild(t)}(e)):m[e]=!0}function j(){d("ready");var e=h;if(h=null,e)if(r)Promise.resolve().then(function(){return E(r)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var n in y)Object.prototype.hasOwnProperty.call(y,n)&&t.push(O(n));e.resolve(t)}}function E(t){if("ready"!==p)throw new Error("apply() is only allowed in ready status");var n,r,i,s,u;function l(e){for(var t=[e],n={},r=t.map(function(e){return{chain:[e],id:e}});r.length>0;){var o=r.pop(),i=o.id,a=o.chain;if((s=k[i])&&!s.hot._selfAccepted){if(s.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:i};if(s.hot._main)return{type:"unaccepted",chain:a,moduleId:i};for(var c=0;c<s.parents.length;c++){var u=s.parents[c],l=k[u];if(l){if(l.hot._declinedDependencies[i])return{type:"declined",chain:a.concat([u]),moduleId:i,parentId:u};-1===t.indexOf(u)&&(l.hot._acceptedDependencies[i]?(n[u]||(n[u]=[]),f(n[u],[i])):(delete n[u],t.push(u),r.push({chain:a.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];-1===e.indexOf(r)&&e.push(r)}}t=t||{};var h={},g=[],b={},m=function(){console.warn("[HMR] unexpected require("+S.moduleId+") to disposed module")};for(var w in y)if(Object.prototype.hasOwnProperty.call(y,w)){var S;u=O(w);var _=!1,j=!1,E=!1,D="";switch((S=y[w]?l(u):{type:"disposed",moduleId:w}).chain&&(D="\nUpdate propagation: "+S.chain.join(" -> ")),S.type){case"self-declined":t.onDeclined&&t.onDeclined(S),t.ignoreDeclined||(_=new Error("Aborted because of self decline: "+S.moduleId+D));break;case"declined":t.onDeclined&&t.onDeclined(S),t.ignoreDeclined||(_=new Error("Aborted because of declined dependency: "+S.moduleId+" in "+S.parentId+D));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(S),t.ignoreUnaccepted||(_=new Error("Aborted because "+u+" is not accepted"+D));break;case"accepted":t.onAccepted&&t.onAccepted(S),j=!0;break;case"disposed":t.onDisposed&&t.onDisposed(S),E=!0;break;default:throw new Error("Unexception type "+S.type)}if(_)return d("abort"),Promise.reject(_);if(j)for(u in b[u]=y[u],f(g,S.outdatedModules),S.outdatedDependencies)Object.prototype.hasOwnProperty.call(S.outdatedDependencies,u)&&(h[u]||(h[u]=[]),f(h[u],S.outdatedDependencies[u]));E&&(f(g,[S.moduleId]),b[u]=m)}var R,A=[];for(r=0;r<g.length;r++)u=g[r],k[u]&&k[u].hot._selfAccepted&&b[u]!==m&&A.push({module:u,errorHandler:k[u].hot._selfAccepted});d("dispose"),Object.keys(x).forEach(function(e){!1===x[e]&&function(e){delete installedChunks[e]}(e)});for(var z,H,C=g.slice();C.length>0;)if(u=C.pop(),s=k[u]){var I={},M=s.hot._disposeHandlers;for(i=0;i<M.length;i++)(n=M[i])(I);for(a[u]=I,s.hot.active=!1,delete k[u],delete h[u],i=0;i<s.children.length;i++){var B=k[s.children[i]];B&&((R=B.parents.indexOf(u))>=0&&B.parents.splice(R,1))}}for(u in h)if(Object.prototype.hasOwnProperty.call(h,u)&&(s=k[u]))for(H=h[u],i=0;i<H.length;i++)z=H[i],(R=s.children.indexOf(z))>=0&&s.children.splice(R,1);for(u in d("apply"),o=v,b)Object.prototype.hasOwnProperty.call(b,u)&&(e[u]=b[u]);var K=null;for(u in h)if(Object.prototype.hasOwnProperty.call(h,u)&&(s=k[u])){H=h[u];var T=[];for(r=0;r<H.length;r++)if(z=H[r],n=s.hot._acceptedDependencies[z]){if(-1!==T.indexOf(n))continue;T.push(n)}for(r=0;r<T.length;r++){n=T[r];try{n(H)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:u,dependencyId:H[r],error:e}),t.ignoreErrored||K||(K=e)}}}for(r=0;r<A.length;r++){var L=A[r];u=L.module,c=[u];try{P(u)}catch(e){if("function"==typeof L.errorHandler)try{L.errorHandler(e)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:u,error:n,originalError:e}),t.ignoreErrored||K||(K=n),K||(K=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:u,error:e}),t.ignoreErrored||K||(K=e)}}return K?(d("fail"),Promise.reject(K)):(d("idle"),new Promise(function(e){e(g)}))}var k={};function P(t){if(k[t])return k[t].exports;var n=k[t]={i:t,l:!1,exports:{},hot:l(t),parents:(s=c,c=[],s),children:[]};return e[t].call(n.exports,n,n.exports,u(t)),n.l=!0,n.exports}P.m=e,P.c=k,P.d=function(e,t,n){P.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},P.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},P.t=function(e,t){if(1&t&&(e=P(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(P.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)P.d(n,r,function(t){return e[t]}.bind(null,r));return n},P.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return P.d(t,"a",t),t},P.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},P.p="",P.h=function(){return o},u(17)(P.s=17)}([function(e,t,n){e.exports=n(7)()},function(e,t,n){e.exports={boundingBox:"boundingBox__q5am2",box:"box__3n5vw",selected:"selected__2PEpG",guide:"guide__3lcsS",active:"active__1jaJY",xAxis:"xAxis__1ag77",yAxis:"yAxis__LO1fy",resizeHandle:"resizeHandle__1PLUu","resize-tr":"resize-tr__ZvMqh","resize-tl":"resize-tl__2WkU4","resize-br":"resize-br__1bQX3","resize-bl":"resize-bl__2hmh_"}},function(e,t,n){"use strict";e.exports=n(5)},function(e,t,n){"use strict";e.exports=n(9)},function(e,t,n){"use strict";var r,o,i,a=n(10),c="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-";function s(){i=!1}function u(e){if(e){if(e!==r){if(e.length!==c.length)throw new Error("Custom alphabet for shortid must be "+c.length+" unique characters. You submitted "+e.length+" characters: "+e);var t=e.split("").filter(function(e,t,n){return t!==n.lastIndexOf(e)});if(t.length)throw new Error("Custom alphabet for shortid must be "+c.length+" unique characters. These characters were not unique: "+t.join(", "));r=e,s()}}else r!==c&&(r=c,s())}function l(){return i||(i=function(){r||u(c);for(var e,t=r.split(""),n=[],o=a.nextValue();t.length>0;)o=a.nextValue(),e=Math.floor(o*t.length),n.push(t.splice(e,1)[0]);return n.join("")}())}e.exports={get:function(){return r||c},characters:function(e){return u(e),r},seed:function(e){a.seed(e),o!==e&&(s(),o=e)},lookup:function(e){return l()[e]},shuffled:l}},function(e,t,n){"use strict";
/** @license React v16.8.6
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(6),o="function"==typeof Symbol&&Symbol.for,i=o?Symbol.for("react.element"):60103,a=o?Symbol.for("react.portal"):60106,c=o?Symbol.for("react.fragment"):60107,s=o?Symbol.for("react.strict_mode"):60108,u=o?Symbol.for("react.profiler"):60114,l=o?Symbol.for("react.provider"):60109,f=o?Symbol.for("react.context"):60110,p=o?Symbol.for("react.concurrent_mode"):60111,d=o?Symbol.for("react.forward_ref"):60112,h=o?Symbol.for("react.suspense"):60113,y=o?Symbol.for("react.memo"):60115,v=o?Symbol.for("react.lazy"):60116,g="function"==typeof Symbol&&Symbol.iterator;function b(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,t,n,r,o,i,a,c){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=[n,r,o,i,a,c],u=0;(e=Error(t.replace(/%s/g,function(){return s[u++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var m={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},w={};function x(e,t,n){this.props=e,this.context=t,this.refs=w,this.updater=n||m}function O(){}function S(e,t,n){this.props=e,this.context=t,this.refs=w,this.updater=n||m}x.prototype.isReactComponent={},x.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&b("85"),this.updater.enqueueSetState(this,e,t,"setState")},x.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},O.prototype=x.prototype;var _=S.prototype=new O;_.constructor=S,r(_,x.prototype),_.isPureReactComponent=!0;var j={current:null},E={current:null},k=Object.prototype.hasOwnProperty,P={key:!0,ref:!0,__self:!0,__source:!0};function D(e,t,n){var r=void 0,o={},a=null,c=null;if(null!=t)for(r in void 0!==t.ref&&(c=t.ref),void 0!==t.key&&(a=""+t.key),t)k.call(t,r)&&!P.hasOwnProperty(r)&&(o[r]=t[r]);var s=arguments.length-2;if(1===s)o.children=n;else if(1<s){for(var u=Array(s),l=0;l<s;l++)u[l]=arguments[l+2];o.children=u}if(e&&e.defaultProps)for(r in s=e.defaultProps)void 0===o[r]&&(o[r]=s[r]);return{$$typeof:i,type:e,key:a,ref:c,props:o,_owner:E.current}}function R(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var A=/\/+/g,z=[];function H(e,t,n,r){if(z.length){var o=z.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function C(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>z.length&&z.push(e)}function I(e,t,n){return null==e?0:function e(t,n,r,o){var c=typeof t;"undefined"!==c&&"boolean"!==c||(t=null);var s=!1;if(null===t)s=!0;else switch(c){case"string":case"number":s=!0;break;case"object":switch(t.$$typeof){case i:case a:s=!0}}if(s)return r(o,t,""===n?"."+M(t,0):n),1;if(s=0,n=""===n?".":n+":",Array.isArray(t))for(var u=0;u<t.length;u++){var l=n+M(c=t[u],u);s+=e(c,l,r,o)}else if(l=null===t||"object"!=typeof t?null:"function"==typeof(l=g&&t[g]||t["@@iterator"])?l:null,"function"==typeof l)for(t=l.call(t),u=0;!(c=t.next()).done;)s+=e(c=c.value,l=n+M(c,u++),r,o);else"object"===c&&b("31","[object Object]"==(r=""+t)?"object with keys {"+Object.keys(t).join(", ")+"}":r,"");return s}(e,"",t,n)}function M(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function B(e,t){e.func.call(e.context,t,e.count++)}function K(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?T(e,r,n,function(e){return e}):null!=e&&(R(e)&&(e=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(A,"$&/")+"/")+n)),r.push(e))}function T(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(A,"$&/")+"/"),I(e,K,t=H(t,i,r,o)),C(t)}function L(){var e=j.current;return null===e&&b("321"),e}var N={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return T(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;I(e,B,t=H(null,null,t,n)),C(t)},count:function(e){return I(e,function(){return null},null)},toArray:function(e){var t=[];return T(e,t,null,function(e){return e}),t},only:function(e){return R(e)||b("143"),e}},createRef:function(){return{current:null}},Component:x,PureComponent:S,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:d,render:e}},lazy:function(e){return{$$typeof:v,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:y,type:e,compare:void 0===t?null:t}},useCallback:function(e,t){return L().useCallback(e,t)},useContext:function(e,t){return L().useContext(e,t)},useEffect:function(e,t){return L().useEffect(e,t)},useImperativeHandle:function(e,t,n){return L().useImperativeHandle(e,t,n)},useDebugValue:function(){},useLayoutEffect:function(e,t){return L().useLayoutEffect(e,t)},useMemo:function(e,t){return L().useMemo(e,t)},useReducer:function(e,t,n){return L().useReducer(e,t,n)},useRef:function(e){return L().useRef(e)},useState:function(e){return L().useState(e)},Fragment:c,StrictMode:s,Suspense:h,createElement:D,cloneElement:function(e,t,n){null==e&&b("267",e);var o=void 0,a=r({},e.props),c=e.key,s=e.ref,u=e._owner;if(null!=t){void 0!==t.ref&&(s=t.ref,u=E.current),void 0!==t.key&&(c=""+t.key);var l=void 0;for(o in e.type&&e.type.defaultProps&&(l=e.type.defaultProps),t)k.call(t,o)&&!P.hasOwnProperty(o)&&(a[o]=void 0===t[o]&&void 0!==l?l[o]:t[o])}if(1===(o=arguments.length-2))a.children=n;else if(1<o){l=Array(o);for(var f=0;f<o;f++)l[f]=arguments[f+2];a.children=l}return{$$typeof:i,type:e.type,key:c,ref:s,props:a,_owner:u}},createFactory:function(e){var t=D.bind(null,e);return t.type=e,t},isValidElement:R,version:"16.8.6",unstable_ConcurrentMode:p,unstable_Profiler:u,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:j,ReactCurrentOwner:E,assign:r}},U={default:N},$=U&&N||U;e.exports=$.default||$},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,c,s=a(e),u=1;u<arguments.length;u++){for(var l in n=Object(arguments[u]))o.call(n,l)&&(s[l]=n[l]);if(r){c=r(n);for(var f=0;f<c.length;f++)i.call(n,c[f])&&(s[c[f]]=n[c[f]])}}return s}},function(e,t,n){"use strict";var r=n(8);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var c=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw c.name="Invariant Violation",c}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";var r=n(4),o=n(11),i=n(15),a=n(16)||0;function c(){return o(a)}e.exports=c,e.exports.generate=c,e.exports.seed=function(t){return r.seed(t),e.exports},e.exports.worker=function(t){return a=t,e.exports},e.exports.characters=function(e){return void 0!==e&&r.characters(e),r.shuffled()},e.exports.isValid=i},function(e,t,n){"use strict";var r=1;e.exports={nextValue:function(){return(r=(9301*r+49297)%233280)/233280},seed:function(e){r=e}}},function(e,t,n){"use strict";var r,o,i=n(12),a=(n(4),1459707606518),c=6;e.exports=function(e){var t="",n=Math.floor(.001*(Date.now()-a));return n===o?r++:(r=0,o=n),t+=i(c),t+=i(e),r>0&&(t+=i(r)),t+=i(n)}},function(e,t,n){"use strict";var r=n(4),o=n(13),i=n(14);e.exports=function(e){for(var t,n=0,a="";!t;)a+=i(o,r.get(),1),t=e<Math.pow(16,n+1),n++;return a}},function(e,t,n){"use strict";var r,o="object"==typeof window&&(window.crypto||window.msCrypto);r=o&&o.getRandomValues?function(e){return o.getRandomValues(new Uint8Array(e))}:function(e){for(var t=[],n=0;n<e;n++)t.push(Math.floor(256*Math.random()));return t},e.exports=r},function(e,t){e.exports=function(e,t,n){var r=(2<<Math.log(t.length-1)/Math.LN2)-1,o=Math.ceil(1.6*r*n/t.length);n=+n;for(var i="";;)for(var a=e(o),c=0;c<o;c++){var s=a[c]&r;if(t[s]&&(i+=t[s]).length===n)return i}}},function(e,t,n){"use strict";var r=n(4);e.exports=function(e){return!(!e||"string"!=typeof e||e.length<6||new RegExp("[^"+r.get().replace(/[|\\{}()[\]^$+*?.-]/g,"\\$&")+"]").test(e))}},function(e,t,n){"use strict";e.exports=0},function(e,t,n){"use strict";n.r(t);var r=n(2),o=n.n(r),i=n(0),a=n.n(i),c=n(3),s=n.n(c),u=["tr","tl","br","bl"],l=n(1),f=n.n(l);function p(e){return(p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function d(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function h(e){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function y(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function v(e,t){return(v=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var g=function(e){function t(e){var n,r,i;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,(n=!(i=h(t).call(this,e))||"object"!==p(i)&&"function"!=typeof i?y(r):i).state={width:e.position?e.position.width:e.defaultPosition.width,height:e.position?e.position.height:e.defaultPosition.height,top:e.position?e.position.top:e.defaultPosition.top,left:e.position?e.position.left:e.defaultPosition.left},n.dragging=!1,n.resizing=!1,n.box=o.a.createRef(),n.onDragStart=n.onDragStart.bind(y(n)),n.shortcutHandler=n.shortcutHandler.bind(y(n)),n.onResizeStart=n.onResizeStart.bind(y(n)),n}var n,i,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&v(e,t)}(t,r["Component"]),n=t,(i=[{key:"onDragStart",value:function(e){var t=this,n=e.target,r=n.getBoundingClientRect().toJSON(),o={startX:r.x,startY:r.y,node:n};this.props.onDragStart&&this.props.onDragStart(e,o),this.dragging=!0;var i=Math.abs(n.offsetLeft-e.clientX),a=Math.abs(n.offsetTop-e.clientY),c=function(e){if(t.dragging){e.stopImmediatePropagation();var o={left:e.clientX-i,top:e.clientY-a},c={startX:r.left,startY:r.top,currentX:o.left,currentY:o.top,node:n};t.props.onDrag&&t.props.onDrag(e,c),t.setState({left:o.left,top:o.top})}};document.addEventListener("mousemove",c),document.addEventListener("mouseup",function e(o){if(t.dragging){var s={left:o.clientX-i,top:o.clientY-a},u={startX:r.left,startY:r.top,endX:s.left,endY:s.top,node:n};t.props.onDragEnd&&t.props.onDragEnd(o,u),document.removeEventListener("mousemove",c),document.removeEventListener("mouseup",e),t.dragging=!1}})}},{key:"shortcutHandler",value:function(e){e.shiftKey||e.ctrlKey||"ArrowRight"!==e.key?e.shiftKey&&!e.ctrlKey&&"ArrowRight"===e.key?this.setState({left:this.state.left+10}):e.shiftKey||e.ctrlKey||"ArrowLeft"!==e.key?e.shiftKey&&!e.ctrlKey&&"ArrowLeft"===e.key?this.setState({left:this.state.left-10}):e.shiftKey||e.ctrlKey||"ArrowUp"!==e.key?e.shiftKey&&!e.ctrlKey&&"ArrowUp"===e.key?this.setState({top:this.state.top-10}):e.shiftKey||e.ctrlKey||"ArrowDown"!==e.key?e.shiftKey&&!e.ctrlKey&&"ArrowDown"===e.key?this.setState({top:this.state.top+10}):e.ctrlKey&&!e.shiftKey&&"ArrowRight"===e.key?this.setState({width:this.state.width+1}):e.ctrlKey&&e.shiftKey&&"ArrowRight"===e.key?this.setState({width:this.state.width+10}):e.ctrlKey&&!e.shiftKey&&"ArrowLeft"===e.key?this.setState({width:this.state.width-1}):e.ctrlKey&&e.shiftKey&&"ArrowLeft"===e.key?this.setState({width:this.state.width-10}):e.ctrlKey&&!e.shiftKey&&"ArrowDown"===e.key?this.setState({height:this.state.height+1}):e.ctrlKey&&e.shiftKey&&"ArrowDown"===e.key?this.setState({height:this.state.height+10}):e.ctrlKey&&!e.shiftKey&&"ArrowUp"===e.key?this.setState({height:this.state.height-1}):e.ctrlKey&&e.shiftKey&&"ArrowUp"===e.key&&this.setState({height:this.state.height-10}):this.setState({top:this.state.top+1}):this.setState({top:this.state.top-1}):this.setState({left:this.state.left-1}):this.setState({left:this.state.left+1})}},{key:"onResizeStart",value:function(e){var t=this,n=e.target,r={node:n.parentNode},o=n.parentNode.getBoundingClientRect().toJSON();this.props.onResizeStart&&this.props.onResizeStart(e,r),this.resizing=!0;var i=function(e){if(t.resizing)if(e.stopImmediatePropagation(),"br"===n.id){var r={width:e.clientX-o.left,height:e.clientY-o.top},i={currentWidth:r.width,currentHeight:r.height,node:n.parentNode};t.props.onResize&&t.props.onResize(e,i),t.setState({width:r.width,height:r.height})}else if("bl"===n.id){var a=o.left-e.clientX,c=o.top+o.height-e.clientY,s={width:o.width+a,height:o.height-c},u={top:o.top,left:o.left-a},l={currentWidth:s.width,currentHeight:s.height,node:n.parentNode};t.props.onResize&&t.props.onResize(e,l),t.setState({width:s.width,height:s.height,top:u.top,left:u.left})}else if("tr"===n.id){var f=e.clientX-o.left,p=o.top-e.clientY,d={width:f,height:o.height+p},h={top:o.top-p,left:o.left},y={currentWidth:d.width,currentHeight:d.height,node:n.parentNode};t.props.onResize&&t.props.onResize(e,y),t.setState({width:d.width,height:d.height,top:h.top,left:h.left})}else if("tl"===n.id){var v=o.left-e.clientX,g=o.top-e.clientY,b={width:o.width+v,height:o.height+g},m={top:o.top-g,left:o.left-v},w={currentWidth:b.width,currentHeight:b.height,node:n.parentNode};t.props.onResize&&t.props.onResize(e,w),t.setState({width:b.width,height:b.height,top:m.top,left:m.left})}};document.addEventListener("mousemove",i),document.addEventListener("mouseup",function e(n){if(t.resizing){document.removeEventListener("mousemove",i),document.removeEventListener("mouseup",e);var r=n.target.parentNode,o=r.getBoundingClientRect().toJSON(),a={finalWidth:o.width,finalHeight:o.height,finalTop:o.top,finalLeft:o.left,node:r};t.props.onResizeEnd&&t.props.onResizeEnd(n,a),t.resizing=!1}})}},{key:"render",value:function(){var e=this,t=this.props,n=t.id,r=t.isSelected,i=r?"".concat(f.a.box," ").concat(f.a.selected):f.a.box,a={width:"".concat(this.state.width,"px"),height:"".concat(this.state.height,"px"),top:"".concat(this.state.top,"px"),left:"".concat(this.state.left,"px")};return o.a.createElement("div",{className:i,id:n,onMouseUp:this.props.selectBox,onMouseDown:this.onDragStart,onKeyUp:this.shortcutHandler,onKeyDown:this.shortcutHandler,ref:this.box,style:a,tabIndex:"0"},r?u.map(function(t){var n="".concat(f.a.resizeHandle," ").concat(f.a["resize-".concat(t)]);return o.a.createElement("div",{key:s.a.generate(),className:n,onMouseDown:e.onResizeStart,id:t})}):null)}}])&&d(n.prototype,i),a&&d(n,a),t}();g.propTypes={defaultPosition:a.a.object.isRequired,id:a.a.string,isSelected:a.a.bool,drag:a.a.bool,resize:a.a.bool,rotate:a.a.bool,keybindings:a.a.bool,onRotateStart:a.a.func,onRotate:a.a.func,onRotateEnd:a.a.func,onResizeStart:a.a.func,onResize:a.a.func,onResizeEnd:a.a.func,onDragStart:a.a.func,onDrag:a.a.func,onDragEnd:a.a.func};var b=g;function m(e,t){var n=Object.keys(e);return Object.getOwnPropertySymbols&&n.push.apply(n,Object.getOwnPropertySymbols(e)),t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n}function w(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?m(n,!0).forEach(function(t){x(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):m(n).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function x(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var O=function(e,t){return"x"===t?[e.left,e.left+parseInt(e.width/2,10),e.left+e.width]:[e.top,e.top+parseInt(e.height/2,10),e.top+e.height]},S=function(e,t,n){return Object.keys(e).map(function(r){var o=e[r][n];if(o!==t)return o}).filter(function(e){return void 0!==e})},_=function(e,t){for(var n=null,r=null,o=[],i=0;i<t.length;i+=1)for(var a=0,c=0;a<e.length&&c<t[i].length;){var s=Math.abs(e[a]-t[i][c]);s<=5&&(n={value:s,activeBoxIndex:a,matchedBoxIndex:c},o=t[i],r=t[i][c]),e[a]<t[i][c]?a+=1:c+=1}return{matchedArray:o,proximity:n,intersection:r}};function j(e){return(j="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function E(){return(E=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function k(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function P(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function D(e){return(D=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function R(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function A(e,t){return(A=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var z=function(e){function t(e){var n,r,i;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,(n=!(i=D(t).call(this,e))||"object"!==j(i)&&"function"!=typeof i?R(r):i).boundingBox=o.a.createRef(),n.state={active:"",boundingBoxDimensions:null,boxes:{},guides:{},guidesActive:!1,match:{}},n.onDragHandler=n.onDragHandler.bind(R(n)),n.selectBox=n.selectBox.bind(R(n)),n.unSelectBox=n.unSelectBox.bind(R(n)),n.resizeEndHandler=n.resizeEndHandler.bind(R(n)),n.deactivateGuides=n.deactivateGuides.bind(R(n)),n}var n,i,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&A(e,t)}(t,r["Component"]),n=t,(i=[{key:"componentDidMount",value:function(){if(this.boundingBox.current&&null===this.state.boundingBoxDimensions){var e=this.boundingBox.current.getBoundingClientRect().toJSON(),t={},n={};n.boundingBox={x:O(e,"x"),y:O(e,"y")},this.props.boxes.forEach(function(e,r){t["box".concat(r)]=e,n["box".concat(r)]={x:O(e,"x"),y:O(e,"y")}}),this.setState({boundingBoxDimensions:e,boxes:t,guides:n})}}},{key:"onDragHandler",value:function(e,t){var n=this,r=Object.assign({},this.state.boxes[t.node.id],{left:t.currentX,top:t.currentY});this.props.onDrag&&this.props.onDrag(e,t),this.setState({active:t.node.id,guidesActive:!0,boxes:Object.assign({},this.state.boxes,k({},t.node.id,Object.assign({},this.state.boxes[t.node.id],{left:t.currentX,top:t.currentY}))),guides:Object.assign({},this.state.guides,k({},t.node.id,Object.assign({},this.state.guides[t.node.id],{x:O(r,"x"),y:O(r,"y")})))},function(){var e,t,r,o,i,a,c,s,u,l=(e=n.state.active,t=n.state.guides,r=t[e].x,o=t[e].y,i=S(t,r,"x"),a=S(t,o,"y"),c=_(r,i),s=_(o,a),u={},c.proximity&&(u.x=w({},c,{activeBoxGuides:r})),s.proximity&&(u.y=w({},s,{activeBoxGuides:o})),u),f=n.state.boxes[n.state.active].left,p=n.state.boxes[n.state.active].top;for(var d in l){var h=l[d],y=h.activeBoxGuides,v=h.matchedArray,g=h.proximity,b=g.activeBoxIndex,m=g.matchedBoxIndex;"x"===d?f=y[b]>v[m]?n.state.boxes[n.state.active].left-g.value:n.state.boxes[n.state.active].left+g.value:p=y[b]>v[m]?n.state.boxes[n.state.active].top-g.value:n.state.boxes[n.state.active].top+g.value}var x=Object.assign({},n.state.boxes,k({},n.state.active,Object.assign({},n.state.boxes[n.state.active],{left:f,top:p}))),j=Object.assign({},n.state.guides,k({},n.state.active,Object.assign({},n.state.guides[n.state.active],{x:O(x[n.state.active],"x"),y:O(x[n.state.active],"y")})));n.setState({boxes:x,guides:j,match:l})})}},{key:"selectBox",value:function(e){this.setState({active:e.target.id})}},{key:"unSelectBox",value:function(e){this.setState({active:""})}},{key:"resizeEndHandler",value:function(e,t){this.setState({boxes:Object.assign({},this.state.boxes,k({},this.state.active,Object.assign({},this.state.boxes[this.state.active],{width:t.finalWidth,height:t.finalHeight,top:t.finalTop,left:t.finalLeft})))})}},{key:"deactivateGuides",value:function(e,t){this.setState({guidesActive:!1})}},{key:"render",value:function(){var e=this,t=this.state,n=t.active,r=t.boxes,i=t.guides,a=Object.keys(r).map(function(t,i){var a=r[t],c="box".concat(i);return o.a.createElement(b,E({},e.props,{defaultPosition:a,id:c,isSelected:n===c,key:s.a.generate(),onDrag:e.onDragHandler,onDragEnd:e.deactivateGuides,selectBox:e.selectBox,onResizeEnd:e.resizeEndHandler}))}),c=Object.keys(i).reduce(function(t,n){var r=e.state.guidesActive?"".concat(f.a.guide," ").concat(f.a.xAxis," ").concat(f.a.active):"".concat(f.a.guide," ").concat(f.a.xAxis),a=i[n].x.map(function(t){return e.state.active&&e.state.active===n&&e.state.match&&e.state.match.x&&e.state.match.x.intersection&&e.state.match.x.intersection===t?o.a.createElement("div",{key:s.a.generate(),className:r,style:{left:t}}):null});return t.concat(a)},[]),u=Object.keys(i).reduce(function(t,n){var r=e.state.guidesActive?"".concat(f.a.guide," ").concat(f.a.yAxis," ").concat(f.a.active):"".concat(f.a.guide," ").concat(f.a.yAxis),a=i[n].y.map(function(t){return e.state.active&&e.state.active===n&&e.state.match&&e.state.match.y&&e.state.match.y.intersection&&e.state.match.y.intersection===t?o.a.createElement("div",{key:s.a.generate(),className:r,style:{top:t}}):null});return t.concat(a)},[]);return o.a.createElement("div",{ref:this.boundingBox,className:f.a.boundingBox,style:{width:"100vw",height:"100vh"}},a,c,u)}}])&&P(n.prototype,i),a&&P(n,a),t}();z.propTypes={drag:a.a.bool,resize:a.a.bool,rotate:a.a.bool,keybindings:a.a.bool,onRotateStart:a.a.func,onRotate:a.a.func,onRotateEnd:a.a.func,onResizeStart:a.a.func,onResize:a.a.func,onResizeEnd:a.a.func,onDragStart:a.a.func,onDrag:a.a.func,onDragEnd:a.a.func};var H=z;t.default=H}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,